name: SonarCloud
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better relevancy of analysis

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool install --global dotnet-sonarscanner
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: Restore Aspire
        run: dotnet workload install aspire

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          # Begin SonarCloud analysis
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"sanjyotagureddy_dotnet-ecommerce" /o:"sanjyotagureddy" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.language="cs" /d:sonar.inclusions="**/*.cs" /d:sonar.tests="**/*Tests.csproj" /d:sonar.test.inclusions="**/*Tests/**/*.cs" /d:sonar.coverage.exclusions="**/*Tests/**/*.cs" /d:sonar.coverage.lcov.reportPaths="coverage.lcov"

          # Restore and build
          dotnet restore dotnet-ecommerce.sln
          dotnet build dotnet-ecommerce.sln --no-restore

          # Run tests and collect coverage for all test projects
          dotnet test dotnet-ecommerce.sln --no-build --collect:"XPlat Code Coverage"

          # Install Coverlet
          dotnet tool install --global coverlet.console

          # Generate LCOV report using coverlet for all test DLLs
          $testDlls = Get-ChildItem -Path .\bin\Debug\net8.0 -Filter *.dll -Recurse | Where-Object { $_.Name -like '*Tests.dll' }

          # Run coverlet for each test DLL
          foreach ($dll in $testDlls) {
            coverlet $dll.FullName --target "dotnet" --targetargs "test --no-build" --format "lcov" --output "coverage.lcov"
          }

          # End SonarCloud analysis
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
